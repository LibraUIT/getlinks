<div class="col-sm-6 margin-bottom-col">
  <div class="col-sm-4">
    <label>Category (*)</label>
  </div>
  <div class="col-sm-8">
    <%= f.select :category_id, @categories.map{|c| [c.name, c.id]}, {include_blank: "- Select Category -"}, {class: 'form-control', required: true } %>
  </div>
</div>
<div class="col-sm-12 margin-bottom-col">
  <div class="col-sm-2">
    <label>Title (*)</label>
  </div>
  <div class="col-sm-10">
    <%= f.text_field :title, class: 'form-control', placeholder: 'Enter title', required: true  %>
  </div>
</div>
<div class="col-sm-12 margin-bottom-col">
  <div class="col-sm-2">
    <label>Content</label>
  </div>
  <div id="content" class="col-sm-10">
    <button onclick="showPreview();" type="button" class="btn btn-success" style="margin-bottom:10px">Preview</button>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="javascript:void(0)" data-toggle="modal" data-target="#markdownModal"><i class="fa fa-question-circle" aria-hidden="true"></i> Markdown Grammar
</a>
    <%= f.text_area :content, class: 'form-control', placeholder: 'Enter content', rows: 20, "oninput" => "this.editor.update()", id: "text-input"  %>
  </div>
  <div style="margin-top:50px" id="content-preview" class="col-sm-5 hide">
    <div id="preview"> </div>
  </div>
</div>
<div class="col-sm-12 margin-bottom-col">
  <div class="col-sm-2">
    <label>Image</label>
  </div>
  <div class="col-sm-10">
    <%= f.file_field :image, class: 'form-control', accept: 'image/png,image/gif,image/jpeg' %>
  </div>
</div>
<div class="col-sm-12 margin-bottom-col">
  <div class="col-sm-2">
    <label>Status</label>
  </div>
  <div class="col-sm-10">
    <%= f.check_box :status %> Show
  </div>
</div>

<%= render "modal_markdown" %>

<%= javascript_tag defer: 'defer' do -%>
    function showPreview() {
      $('#content-preview').toggleClass('hide');
      if ($('#content').hasClass('col-sm-10')) {
        $('#content').addClass('col-sm-5').removeClass('col-sm-10');
      } else {
        $('#content').removeClass('col-sm-5').addClass('col-sm-10');
      }
    }

    function Editor(input, preview) {
      this.update = function () {
        preview.innerHTML = markdown.toHTML(input.value);
      };
      input.editor = this;
      this.update();
    }
    try {
      var $mark = function (id) { return document.getElementById(id); };
      new Editor($mark("text-input"), $mark("preview"));
    } catch(err){}
<% end -%>
